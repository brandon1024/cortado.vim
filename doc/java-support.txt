*java-support.txt*                                 Easier editing of Java files.

Author:  Brandon Richardson <brandon1024.br@gmail.com>
License: MIT license

================================================================================
CONTENTS                                                 *java-support-contents*

INTRODUCTION                                         |java-support-introduction|
  FEATURES                                               |java-support-features|
USAGE                                                       |java-support-usage|
  COMMANDS                                               |java-support-commands|
OPTIONS                                                   |java-support-options|
  SORT OPTIONS                                       |java-support-sort-options|
  IMPORT OPTIONS                                   |java-support-import-options|
  INDEX OPTIONS                                     |java-support-index-options|
  MISC OPTIONS                                       |java-support-misc-options|
MAPPINGS                                                 |java-support-mappings|
  CREATING CUSTOM MAPPINGS               |java-support-creating-custom-mappings|
EXTRA                                                       |java-support-extra|
  LIMITATIONS                                         |java-support-limitations|
  UNIVERSAL CTAGS                                 |java-support-universal-ctags|
  REPORTING ISSUES                               |java-support-reporting-issues|
  INTERNAL DATA STRUCTURES               |java-support-internal-data-structures|


================================================================================
INTRODUCTION                                         *java-support-introduction*

Java is a notoriously difficult language to work with in Vim, likely because
fantastic purpose-built development tools (like IntelliJ and Gradle) already
exist, making Vim appear obsolete. Vim is still extremely powerful for text
editing and development tasks, especially with a bit of practice, but it's
missing a few niceties that come standard in a full-fledged integrated
development environment.

java-support is a Vim plugin to make working on Java projects with Vim a
bit easier. The plugin mainly helps you with imports (auto import,
reformatting, optimizing), but more features are planned.

The plugin itself does not have any external dependencies, and aims to leverage
native capabilities of Vim. The plugin is also very lightweight compared to
other solutions out there. You don't need to setup a complicated language
server and install a million plugins to get it working--it just works out of
the box.

java-support is unobtrusive. To avoid overriding built-in or user-defined
mappings, the plugin doesn't create any key mappings. You are left to create
mappings that best suit your workflow.

--------------------------------------------------------------------------------
FEATURES                                                 *java-support-features*

Sort/Reformat Import Statements~
	Automatically sort your import statements. Group import statements by
	package, and configure the order of individual import groups.

Optimize/Merge Import Statements~
	Remove duplicate or unecessary import statements. Automatically merge
	same-package imports into a single wildcard import (when enabled).

Class/Interface/Enum/Method Import~
	Import project classes, interfaces, enums and static methods by name with
	the help of tag files. Intelligently index imported classes found in Java
	project files, offering suggestions for classes not found in tag files.

Introduce Local Variable Declaration~
	Insert a local variable declaration under the cursor.

================================================================================
USAGE                                                       |java-support-usage|

To cleanup import statements:
>
	:Java cleanup-imports
<

To import a class or enum with a specific name:
>
	:Java import MyClass
<

To import a class or enum with a name under the cursor:
>
	:Java import
<

To re-index (cache) references from imports in the current project (cwd):
>
	:Java index
<

To insert a local variable declaration under the current line:
>
	:Java insert-var
<

--------------------------------------------------------------------------------
COMMANDS                                                 *java-support-commands*

                                                                         *:Java*
:Java cleanup-imports
	Clean up import statements in the current buffer. Import statements are
	removed, optimized, sorted, and then written to the buffer just below the
	package statement (if exists).

:Java import [{name}]
	Import a class and cleanup the imports.

	Search tag files for classes and enums with a specific {name}. If {name} is
	given, searches for classes with that name. If {name} is omitted, searches
	for classes with a name under the cursor (<cword>).

	If there are multiple results, a popup menu is shown allowing the user to
	select which class to import. With the popup visible, you can use j/<Down>
	and k/<Up> keys select a result. You can also use h/<Left> and l/<Right> to
	show additional information.

	If there's nothing under the cursor (<cword> expands to ''), the import
	statements are sorted (equivalent to running 'cleanup-imports').

:Java index [{subcommand} [{arg}]]
	Manipulate the index. Indexing will help offer better import suggestions by
	offering classes that have been imported elsewhere in a project. The index
	is not created automatically at startup; you'll need to plumb that
	yourself. In large projects, indexing may take a while to complete.

	Without any {subcommand} or {arg}, the 'dir' subcommand is assumed,
	starting at the current working directory.

	If {subcommand} is 'buffer', imports from the buffer {arg} are merged into
	the index. If {arg} is omitted, imports are read from the current buffer
	'%'.

	If {subcommand} is 'dir', Java files are read through recursive directory
	traversal starting from directory {arg} and merged into the index. If {arg}
	is omitted, the current working directory is used. 'wildignore' is
	respected.

	If {subcommand} is 'save', the index is written to the file
	|g:java_import_index_path|.

	If {subcommand} is 'recover', the index is read from the file
	|g:java_import_index_path| and merged into the index.

	If {subcommand} is 'clear', the index is cleared.

:Java insert-var
	Insert a local variable declaration and assignment at the beginning of the
	line, placing the cursor at the variable name. This will insert 'final var
	= ' at the beginning of the line.

	This plugin does not know anything about the lexical structure of Java
	source code. It knows nothing about your Java version, nor does it have any
	knowledge of any types. This is merely a convenience feature for Java 11+
	sources, leveraging type inference features ('var' keyword).

================================================================================
OPTIONS                                                   *java-support-options*

--------------------------------------------------------------------------------
SORT OPTIONS                                         *java-support-sort-options*

                                                         *'g:java_import_order'*
A list of dictionaries used to configure how import statements are grouped.

If "static" is true, only static imports are included in the group. Otherwise,
only non-static imports are included in the group.

"packages" is a list of strings matching the beginning of the imported package
path. If empty, all remaining imports are grouped together.

Default:
>
	let g:java_import_order = [
		\ { 'static': 1, 'packages': [] },
		\ { 'static': 0, 'packages': ['java.', 'javax.'] },
		\ { 'static': 0, 'packages': [] }]
<

                                                   *'g:java_import_space_group'*
Insert an empty line between import groups.

Default:
>
	let g:java_import_space_group = 1
<

                                                *'g:java_import_wildcard_count'*
Configure whether to merge import statements into a single wildcard import. The
value is a number, where:
- (< 0) will remove wildcard import statements altogether (may require
manually adding new import statements),
- (= 0) will keep existing wildcard imports and merge them, but otherwise won't
merge imports,
- (> 0) will merge imports in the same package into a single wildcard import
when the number of imports exceeds the configured value.

The following contrived example demonstrates this behaviour.
>
	// original
	import java.io.IOException;
	import java.io.SSLException;
	import java.io.StringWriter;
	import java.io.ObjectInputFilter.Status;
	import java.util.List;
	import java.util.Collections;
	import java.util.*;

	// let g:java_import_wildcard_count = -1
	import java.io.IOException;
	import java.io.ObjectInputFilter.Status;
	import java.io.SSLException;
	import java.io.StringWriter;
	import java.util.Collections;
	import java.util.List;

	// let g:java_import_wildcard_count = 0
	import java.io.IOException;
	import java.io.ObjectInputFilter.Status;
	import java.io.SSLException;
	import java.io.StringWriter;
	import java.util.*;
	import java.util.Collections;
	import java.util.List;

	// let g:java_import_wildcard_count = 3
	import java.io.*;
	import java.io.ObjectInputFilter.Status;
	import java.util.Collections;
	import java.util.List;
<

Default:
>
	let g:java_import_wildcard_count = 0
<

--------------------------------------------------------------------------------
IMPORT OPTIONS                                     *java-support-import-options*

There are no import options at this time.

--------------------------------------------------------------------------------
INDEX OPTIONS                                       *java-support-index-options*

                                                *'g:java_import_index_progress'*
Enable or disable progress information when indexing. When enabled, a popup is
shown in the bottom right corner to show which files are being indexed.

Default:
>
	let g:java_import_index_progress = 1
<

                                                    *'g:java_import_index_path'*
When not empty, the index is written to a file in this directory and may be used
to load the index through |:JavaImportIndexRecover|. If empty, the index is not
saved and must be recreated in each new session.

Default:
>
	let g:java_import_index_path = $HOME . '.cache/java-support/.idx'
<

--------------------------------------------------------------------------------
MISC OPTIONS                                         *java-support-misc-options*

                                             *'g:java_insert_var_declare_final'*
When inserting local variable declarations, configure whether to create variable
as 'final'.

Default:
>
	let g:java_insert_var_declare_final = 1
<

================================================================================
MAPPINGS                                                 *java-support-mappings*

--------------------------------------------------------------------------------
CREATING CUSTOM MAPPINGS                 *java-support-creating-custom-mappings*

Key mappings are not created by default, but you can add them if you wish. Here
are some mappings that I use:
>
	nnoremap <silent> <C-i> :Java import<CR>
	nnoremap <silent> <leader>jc :Java index<CR>
	nnoremap <silent> <F5> :Java insert-var<CR>
	inoremap <silent> <F5> <C-o>:Java insert-var<CR>
<

The possibilities don't end there. If you are feeling bold, you could
sort imports on a BufWritePre event to clean up imports before saving, or
configure indexing to run automatically at startup (on VimEnter event).

================================================================================
EXTRA                                                       *java-support-extra*

--------------------------------------------------------------------------------
LIMITATIONS                                           *java-support-limitations*

Unsupported Platforms~
	This plugin is only tested in a handful of environments, notably Ubuntu
	20.02 and macOS. This plugin is not tested in Windows. Neovim is not
	officially supported. All contributions to support additional environments
	are welcome!

Illegal Java Syntax~
	If you're editing a particularly bad Java file--one that doesn't adhere to
	the Java specification--the plugin might not behave correctly.

Classes in Base Package~
	This plugin relies on package statements to determine the fully-qualified
	classname. If classes exist in the base package (and don't have an import
	statement), the plugin won't suggest it.

Method Imports Always Static~
	If you try to import a (non-static) instance method, the plugin will
	suggest the import even though it's not possible to import non-static
	methods. Doing so might mean that your class will not compile. It would be
	a user error to import non-static methods.

Dependence on ctags~
	This plugin relies heavily on tag files. If you aren't using ctags (or
	you're using a particularly dumb tag file generator), not all features will
	work. If you aren't using |universal-ctags|, you should.. It's amazing.
	See |java-support-universal-ctags|.

--------------------------------------------------------------------------------
UNIVERSAL CTAGS                                   *java-support-universal-ctags*

This plugin uses tag files to locate classes and build fully-qualified class
names. Without it, import features will be limited. If you haven't worked
with *universal-ctags* before, it'll change your life. It's also pretty easy to
use. I'll give a bit of information in this section, but you should definitely
read through the ctags documentation for a more comprehensive overview.

A tag file is a sorted list of keywords with information on their location. If
you take a peek at a tag file, you'll see that each line is a tab-delimited
list of things:
>
	{tagname}<Tab>{tagfile}<Tab>{tagaddress}
<

This is the simplest format. For modern tag file generators (like
universal-ctags), each line will include extra metadata, like the kind of
keyword (class, method, etc) or any other useful bit of information. You can
read more about the format by reading the tags(5) manual.

To generate a tag file for your project, just run something like this:
>
	$ ctags -R .
<

This will traverse your project recursively, reading your files and generating
a tags file (tags) in the current directory. There's a lot more you can do with
it, read ctags(1) if you're interested.

What about libraries? If your project uses thirdparty libraries, it's difficult
to generate tag files that include keywords from those files. The way that Java
libraries are distributed makes it difficult to integrate with tools like
ctags. Without some special handling, you'll only be able to use tag files for
files in your project.

I built a project called *gtags* that can be used for generating tag files for
project libraries. It's a Gradle plugin that reads your dependencies and
decompiles them so that you can run ctags on the decompiled source files. The
plugin isn't really used by anyone so it's a bit clunky to use, but I'll
mention it here anyway.

https://github.com/brandon1024/gtags

--------------------------------------------------------------------------------
REPORTING ISSUES                                 *java-support-reporting-issues*

If you run into issues, please file an issue on our github page! Be sure to
include lots of detail (a minimal reproducible example is required). I also
accept patches and contributions of any form! If you like the plugin, star the
repo :-)

https://github.com/brandon1024/java-support.vim

--------------------------------------------------------------------------------
INTERNAL DATA STRUCTURES                 *java-support-internal-data-structures*

If you're planning to contribute to the project, it might be handy to know a
bit about how import statements are represented internally in this plugin.
Import trees and index structures are non-trivial, but this should help.

An import tree is a tree data structure representing the import statements of a
Java file (or multiple Java files). The tree is a dictionary of dictionaries.
At each level in the tree, there's a 'leaf' and 'children' key. The 'leaf' key
represents all classes in a particular package. The 'children' key is all
sub-packages.

Each key in a 'children' dictionary is a single package component. For example,
at the root of the tree for the class 'java.util.Collections', a key 'java'
would exist. The value would be another tree, with a 'children' dictionary with
a key 'util', and so on.

Each key in a 'leaf' dictionary is a class name. The value is some metadata
associated with that import, like whether it's a static import. Star imports
are permitted, the key being '*'.

The following example shows the tree for a single import
'java.util.Collections':
>
	{
	  'leaf': {},
	  'children': {
	    'java': {
	      'leaf': {},
	      'children': {
	        'util': {
	          'leaf': {
	            'Collections': { 's': v:false }
	          },
	          'children': {}
	        }
	      }
	    }
	  }
	}
<

The import tree will grow in depth and breadth as more import statements are
merged into the tree. The process of parsing an import statement from a Java
file into a form that can be inserted into a tree is called 'normalization'.

Import trees can be flattened into a list of fully-qualified class names. This
is useful when writing optimized import statements back to a buffer. This
process is pretty straightforward and involves traversing the tree and
collecting the path to each leaf node into a list.

Depending on how the user has configured the plugin, wildcard imports may be
adjusted during this flattening process. Some projects enforce coding
guidelines that ban the use of wildcard imports, so these imports may be
removed. If wildcards are allowed, they might get merged into a single import
above a certain number. There are other options as well.

An index is an alternate representation of an import tree that can be used to
quickly find the fully-qualified path of a particular class. Indexing a Java
file or a project will produce an index that can be used when suggesting
imports. The plugin uses an index as a cache.

An index is a dictionary where each key is a class name. The value is a list of
dictionaries. Each dictionary is some metadata for that import (fully-qualified
path, static/non-static import, etc.).

The following example shows the index for a single import
'java.util.Collections':
>
	{
	  'Collections': [{
	    'fq_name': ['java', 'util', 'Collections'],
	    'meta': { 's': v:false }
	  }]
	}
<

=============================================================================
vim:tw=78:ts=8:noet:ft=help:norl:
