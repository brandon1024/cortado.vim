Describe Import
	After
		%bwipeout!
	End

	Describe #JavaImportKeyword
		It should sort imports if no classname provided and no keyword under cursor
			edit! test/input/Simple.java

			" position the cursor at the end of the file so that <cword> expands
			" to empty string
			call cursor(line('$'), 0)

			" sanity check
			Assert Equals(expand('<cword>'), '')

			call java_support#import#JavaImportKeyword()

			let l:import_lines = java_support#buffer#FindLinesMatchingPattern('%', 1, '^import')
			Assert Equals(len(l:import_lines), 2)

			" should have sorted
			Assert Equals(l:import_lines[0], 'import ca.example.vim.external.Interface;')
			Assert Equals(l:import_lines[1], 'import ca.example.vim.internal.ImportedClass;')
		End
	End

	Describe #ResultComparator
		It should sort results by kind
			let l:results = [
				\ { 'type': 'indexed', 'val': 9 },
				\ { 'type': 'c', 'val': 0 },
				\ { 'type': 'm', 'val': 8 },
				\ { 'type': 'c', 'val': 1 },
				\ { 'type': 'e', 'val': 6 },
				\ { 'type': 'g', 'val': 5 },
				\ { 'type': 'e', 'val': 7 },
				\ { 'type': 'a', 'val': 4 },
				\ { 'type': 'i', 'val': 3 },
				\ { 'type': 'indexed', 'val': 10 },
				\ { 'type': 'unknown', 'val': 11 },
				\ { 'type': 'c', 'val': 2 },
			\ ]

			let l:sorted = sort(l:results, function('java_support#import#ResultComparator'))
			for i in range(len(l:results))
				Assert Equals(l:sorted[i]['val'], i)
			endfor
		End
	End

	Describe #MergeFilterDuplicateResults
		It should filter indexed results that exist in the tag results
			let l:results = [
				\ { 'fq_name': ['com', 'example', 'vim'] },
				\ { 'fq_name': ['com', 'example', 'vim1'] },
			\ ]
			let l:index_results = [
				\ { 'fq_name': ['com', 'example', 'vim1'] },
			\ ]

			let l:filtered = java_support#import#MergeFilterDuplicateResults(l:results, l:index_results)
			Assert Equals(len(l:filtered), 2)
			for i in range(len(l:filtered))
				Assert Equals(l:filtered[i].fq_name, l:results[i].fq_name)
			endfor
		End
	End
End

