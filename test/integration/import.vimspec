Describe cortado#import
	After
		%bwipeout!
	End

	Describe #import
		It should sort imports if no classname provided and no keyword under cursor
			let buffers = cortado#internal#buffer#new()

			edit! test/input/Simple.java

			" position the cursor at the end of the file so that <cword> expands
			" to empty string
			call cursor(line('$'), 0)

			" sanity check
			Assert Equals(expand('<cword>'), '')

			call cortado#import#keyword()

			let import_lines = buffers.lines_matching_patt('%', 1, '^import')
			Assert Equals(len(import_lines), 2)

			" should have sorted
			Assert Equals(import_lines[0], 'import ca.example.vim.external.Interface;')
			Assert Equals(import_lines[1], 'import ca.example.vim.internal.ImportedClass;')
		End
	End

	Describe #result_comparator
		It should sort results by kind
			let results = [
				\ { 'type': 'indexed', 'val': 9 },
				\ { 'type': 'c', 'val': 0 },
				\ { 'type': 'm', 'val': 8 },
				\ { 'type': 'c', 'val': 1 },
				\ { 'type': 'e', 'val': 6 },
				\ { 'type': 'g', 'val': 5 },
				\ { 'type': 'e', 'val': 7 },
				\ { 'type': 'a', 'val': 4 },
				\ { 'type': 'i', 'val': 3 },
				\ { 'type': 'indexed', 'val': 10 },
				\ { 'type': 'unknown', 'val': 11 },
				\ { 'type': 'c', 'val': 2 },
			\ ]

			let sorted = sort(results, function('cortado#import#result_comparator'))
			for i in range(len(results))
				Assert Equals(sorted[i]['val'], i)
			endfor
		End
	End

	Describe #merge_filter_duplicate_results
		It should filter indexed results that exist in the tag results
			let results = [
				\ { 'fq_name': ['com', 'example', 'vim'] },
				\ { 'fq_name': ['com', 'example', 'vim1'] },
			\ ]
			let index_results = [
				\ { 'fq_name': ['com', 'example', 'vim1'] },
			\ ]

			let filtered = cortado#import#merge_filter_duplicate_results(results, index_results)
			Assert Equals(len(filtered), 2)
			for i in range(len(filtered))
				Assert Equals(filtered[i].fq_name, results[i].fq_name)
			endfor
		End
	End
End

