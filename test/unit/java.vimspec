Describe java
	Describe #IsValidIdentifier
		It should return false is empty string provided
			Assert False(java_support#java#IsValidIdentifier(''))
		End

		It should return false if does not match valid identifier
			let l:invalid = [
				\ '.thing',
				\ '1thing',
				\ 'thing@',
				\ 'th@ing',
				\ 'th ing'
				\ ]

			for ident in l:invalid
				Assert False(java_support#java#IsValidIdentifier(ident), 'failed for ' . ident)
			endfor
		End

		It should return true if does match valid identifier
			let l:invalid = [
				\ '$thing',
				\ '_thing',
				\ 'thing1',
				\ 'Thing1',
				\ 'T',
				\ 'T$1_'
				\ ]

			for ident in l:invalid
				Assert True(java_support#java#IsValidIdentifier(ident), 'failed for ' . ident)
			endfor
		End
	End

	Describe #NormalizeImportStatements
		It should trim writespace correctly
			let l:stmts = '      import java.util.Collections;	
			\	import    	 ca.example.vim.internal.ImportedClass; '

			let l:result = java_support#java#NormalizeImportStatements(l:stmts)
			Assert Equals(len(l:result), 2)

			let l:first = l:result[0]
			Assert Equals(len(l:first[0]), 3)
			Assert Equals(l:first[0][0], 'java')
			Assert Equals(l:first[0][1], 'util')
			Assert Equals(l:first[0][2], 'Collections')

			let l:second = l:result[1]
			Assert Equals(len(l:second[0]), 5)
			Assert Equals(l:second[0][0], 'ca')
			Assert Equals(l:second[0][1], 'example')
			Assert Equals(l:second[0][2], 'vim')
			Assert Equals(l:second[0][3], 'internal')
			Assert Equals(l:second[0][4], 'ImportedClass')
		End

		It should normalize non-static import statements into its components
			let l:stmts = 'import java.util.Collections;'

			let l:result = java_support#java#NormalizeImportStatements(l:stmts)
			Assert Equals(len(l:result), 1)

			let l:first = l:result[0]
			let l:components = l:first[0]
			Assert Equals(len(l:components), 3)
			Assert Equals(l:components[0], 'java')
			Assert Equals(l:components[1], 'util')
			Assert Equals(l:components[2], 'Collections')

			let l:meta = l:first[1]
			Assert Equals(l:meta['s'], v:false)
		End

		It should normalize static import statements into its components
			let l:stmts = 'import static java.util.Collections;'

			let l:result = java_support#java#NormalizeImportStatements(l:stmts)
			Assert Equals(len(l:result), 1)

			let l:first = l:result[0]
			let l:components = l:first[0]
			Assert Equals(len(l:components), 3)
			Assert Equals(l:components[0], 'java')
			Assert Equals(l:components[1], 'util')
			Assert Equals(l:components[2], 'Collections')

			let l:meta = l:first[1]
			Assert Equals(l:meta['s'], v:true)
		End
	End
End

