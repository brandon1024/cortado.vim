Describe tags
	Describe #Lookup
		After
			set noignorecase
		End

		Describe common
			It should have found the tag file for tests
				Assert True(len(tagfiles()) > 0)
				Assert True(len(taglist('^Simple$')) > 0)
			End

			It should find the package statement even if it appears pretty far in file
				Assert True(len(taglist('^PackageStatementTest$')) > 0)
				let l:result = java_support#tags#Lookup('PackageStatementTest')
				Assert Equals(len(l:result), 1)
				
				let l:result = l:result[0]
				Assert Equals(l:result.type, 'c')
				Assert Equals(l:result.fq_name, ['ca', 'example', 'vim', 'PackageStatementTest'])
			End

			It should search tags in a case sensitive manner regardless of ignorecase option
				set ignorecase
				let l:result = java_support#tags#Lookup('uniquecasesensitivename')
				Assert Equals(len(l:result), 1)

				let l:result = java_support#tags#Lookup('UNIQUECASESENSITIVENAME')
				Assert Equals(len(l:result), 1)
			End
		End

		Describe class/interface/enum/annotation imports
			It should find a class when given a classname
				let l:result = java_support#tags#Lookup('Simple')
				Assert True(len(l:result) > 0)

				" find ours
				let l:result = test_utils#tags#FindResult('c', 'ca.example.vim.Simple', l:result)
				Assert NotEqual(l:result, v:null)
				Assert False(l:result.s)
			End

			It should find a nested class when given a classname
				let l:result = java_support#tags#Lookup('StaticInnerClass')
				Assert True(len(l:result) > 0)

				" find ours
				let l:result = test_utils#tags#FindResult('c', 'ca.example.vim.NestedClasses.StaticInnerClass', l:result)
				Assert NotEqual(l:result, v:null)
				Assert False(l:result.s)
			End

			It should find an interface when given an interface name
				let l:result = java_support#tags#Lookup('SimpleInterface')
				Assert True(len(l:result) > 0)

				" find ours
				let l:result = test_utils#tags#FindResult('i', 'ca.example.vim.SimpleInterface', l:result)
				Assert NotEqual(l:result, v:null)
				Assert False(l:result.s)
			End

			It should find a nested interface when given an interface name
				let l:result = java_support#tags#Lookup('MyNestedInterface')
				Assert True(len(l:result) > 0)

				" find ours
				let l:result = test_utils#tags#FindResult('i', 'ca.example.vim.NestedInterfaces.MyNestedInterface', l:result)
				Assert NotEqual(l:result, v:null)
				Assert False(l:result.s)
			End

			It should find an enum definition with a given name
				let l:result = java_support#tags#Lookup('SimpleEnum')
				Assert True(len(l:result) > 0)

				" find ours
				let l:result = test_utils#tags#FindResult('g', 'ca.example.vim.SimpleEnum', l:result)
				Assert NotEqual(l:result, v:null)
				Assert False(l:result.s)
			End

			It should find a nested enum definition with a given name
				let l:result = java_support#tags#Lookup('MyNestedEnum')
				Assert True(len(l:result) > 0)

				" find ours
				let l:result = test_utils#tags#FindResult('g', 'ca.example.vim.NestedEnums.MyNestedEnum', l:result)
				Assert NotEqual(l:result, v:null)
				Assert False(l:result.s)
			End

			It should find an annotation definition with a given name
				let l:result = java_support#tags#Lookup('SimpleAnnotation')
				Assert True(len(l:result) > 0)

				" find ours
				let l:result = test_utils#tags#FindResult('a', 'ca.example.vim.SimpleAnnotation', l:result)
				Assert NotEqual(l:result, v:null)
				Assert False(l:result.s)
			End

			It should find a nested annotation definition with a given name
				let l:result = java_support#tags#Lookup('MyNestedAnnotation')
				Assert True(len(l:result) > 0)

				" find ours
				let l:result = test_utils#tags#FindResult('a', 'ca.example.vim.NestedAnnotations.MyNestedAnnotation', l:result)
				Assert NotEqual(l:result, v:null)
				Assert False(l:result.s)
			End
		End

		Describe enum/method imports
			It should find a method with a given name
				let l:result = java_support#tags#Lookup('myStaticMethod')
				Assert True(len(l:result) > 0)

				" find ours
				let l:result = test_utils#tags#FindResult('m', 'ca.example.vim.ImportStaticMethod.myStaticMethod', l:result)
				Assert NotEqual(l:result, v:null)
				Assert True(l:result.s)
			End

			It should find an enum with a given name
				let l:result = java_support#tags#Lookup('ENUM_VALUE')
				Assert True(len(l:result) > 0)

				" find ours
				let l:result = test_utils#tags#FindResult('e', 'ca.example.vim.SimpleEnum.ENUM_VALUE', l:result)
				Assert NotEqual(l:result, v:null)
				Assert True(l:result.s)
			End
		End
	End
End

